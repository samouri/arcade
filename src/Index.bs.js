// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Pervasives from "../node_modules/bs-platform/lib/es6/pervasives.js";
import * as Caml_format from "../node_modules/bs-platform/lib/es6/caml_format.js";

var lastTime = {
  contents: Date.now() | 0
};

var input = {
  direction: undefined,
  bbox: false,
  grid: false
};

function gameloop(ctx, world) {
  lastTime.contents = Date.now() | 0;
  input.direction = undefined;
  requestAnimationFrame(function (param) {
        return gameloop(ctx, world);
      });
  
}

function load(param) {
  var el = document.getElementById("canvas");
  var canvas = (el == null) ? (console.log("cant find canvas canvas \n"), Pervasives.failwith("fail")) : el;
  canvas.setAttribute("height", String(480) + "px");
  canvas.setAttribute("width", String(420) + "px");
  canvas.setAttribute("style", "max-width: " + (String(420) + ("px; max-height: " + (String(480) + "px"))));
  var context = canvas.getContext("2d");
  return gameloop(context, {
              state: /* Start */1
            });
}

window.onload = load;

function keydown(evt) {
  var match = Caml_format.caml_int_of_string(evt.key);
  if (match >= 41) {
    switch (match) {
      case 65 :
          input.direction = /* Left */0;
          return ;
      case 66 :
          input.bbox = !input.bbox;
          return ;
      case 68 :
          input.direction = /* Right */1;
          return ;
      case 71 :
          input.grid = !input.grid;
          return ;
      case 83 :
          input.direction = /* Down */3;
          return ;
      case 67 :
      case 69 :
      case 70 :
      case 72 :
      case 73 :
      case 74 :
      case 75 :
      case 76 :
      case 77 :
      case 78 :
      case 79 :
      case 80 :
      case 81 :
      case 82 :
      case 84 :
      case 85 :
      case 86 :
          break;
      case 87 :
          input.direction = /* Up */2;
          return ;
      default:
        
    }
  } else if (match >= 32) {
    switch (match - 32 | 0) {
      case 1 :
      case 2 :
      case 3 :
      case 4 :
          break;
      case 5 :
          input.direction = /* Left */0;
          return ;
      case 0 :
      case 6 :
          input.direction = /* Up */2;
          return ;
      case 7 :
          input.direction = /* Right */1;
          return ;
      case 8 :
          input.direction = /* Down */3;
          return ;
      
    }
  }
  console.log("did not find nothing: " + evt.key);
  
}

console.log("woot this working??");

var height = 480;

var width = 420;

export {
  height ,
  width ,
  lastTime ,
  input ,
  gameloop ,
  load ,
  keydown ,
  
}
/* lastTime Not a pure module */
